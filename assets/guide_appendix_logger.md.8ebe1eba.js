import{_ as e,c as o,o as t,d as a}from"./app.5cbb4beb.js";const f='{"title":"Logger","description":"","frontmatter":{},"headers":[],"relativePath":"guide/appendix/logger.md","lastUpdated":1646223014000}',s={},n=a('<h1 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-hidden="true">#</a></h1><p>This is possibly the easiest to understand. <code>&quot;MAX_LOG_LEVEL&quot;: &quot;WARN&quot;</code>, changes the logging level to <code>WARN</code>. This means that you don\u2019t get any messages, unless they\u2019re either a warning or an error message. The available options are <code>TRACE</code> (every time you enter a function), <code>DEBUG</code> information that we use when we know something went wrong, <code>INFO</code> the default, <code>WARN</code> and <code>ERROR</code>, which silences any logging except for error messages. Another useful option might be to use <code>&quot;LOG_FILE_PATH&quot;: bunyan.json</code> . What this will do, is create (if it didn\u2019t exist already) a file called <code>bunyan.json</code> that contains the logging in a structured format. This is extremely useful for two reasons: first, you can use the <code>bunyan</code> log viewer to filter information more precisely than Iroha would allow you to do. <em>Want only messages from a specific module or package? You can do that with bunyan</em>. Secondly, while copying logs is not too big of a problem if your instance is just a small setup, for bigger and longer running the process the larger the log will be. Having it be saved to a file makes much more sense in that case. (<strong>TIP</strong>: you can also set this to <code>/dev/stdout</code> if you want to use bunyan\u2019s logging facilities directly, but don\u2019t want to waste space in the filesystem).</p>',2),i=[n];function r(c,d,l,g,u,h){return t(),o("div",null,i)}var m=e(s,[["render",r]]);export{f as __pageData,m as default};
