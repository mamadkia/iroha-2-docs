import{_ as r,c as s,o as a,a as e,b as t}from"./app.5cbb4beb.js";const w='{"title":"Trusted peers","description":"","frontmatter":{},"headers":[],"relativePath":"guide/appendix/trusted-peers.md","lastUpdated":1646223014000}',o={},n=e("h1",{id:"trusted-peers",tabindex:"-1"},[t("Trusted peers "),e("a",{class:"header-anchor",href:"#trusted-peers","aria-hidden":"true"},"#")],-1),i=e("p",null,[t("Iroha is a blockchain ledger. In order for it to work optimally and be Byzantine-fault tolerant with the maximum number of faults allowed, it needs to be started with a set number of peers: 4, 7, 10 \u2026 3f+1, where f is the number of faults. So usually, when you want to start an Iroha deployment you should already know a number of peers that you can trust and join their blockchain. The way it works in the examples, is that you just specify in four"),e("code",null,"config.json"),t(" files four peers with their public keys and API addresses. Since Iroha has no automatic peer discovery, the only other way to make peers known to each other is to use the "),e("code",null,"iroha_client_cli"),t(" to register new peers. This is not too difficult with the provided client libraries. In fact using Python\u2019s beautiful soup, the curated list of peers can be updated, registered and un-registered on its own.")],-1),d=[n,i];function u(l,c,h,p,f,_){return a(),s("div",null,d)}var y=r(o,[["render",u]]);export{w as __pageData,y as default};
